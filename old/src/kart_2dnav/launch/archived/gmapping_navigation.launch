<?xml version="1.0"?>

<launch>
    <!-- DRIVER INIITIALIZATION (SBG & VELODYNE) -->
    <!-- In this section the SBG and Velodyne Sensors will be initialized. Launch 
         files will be used in order to launch each of them and start outputting
         the data on the associated topics -->

    <!-- velodyne sensor configuration and drivers -->

    <include file="$(find velodyne_pointcloud)/launch/VLP16_points.launch" />

    <!-- sbg driver for the ellipse-n imu w/ gnss -->>

    <include file="$(find kart_2dnav)/launch/kart/sbg_ellipseN.launch" />

    <!-- LASERSCAN SLICING -->
    <!-- In this next section we will slice up the velodyne pointcloud into a laser scan topic -->
    <!-- slice up the 3d point cloud into laserscan messages -->
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">
        <!-- should there be stuff in this param file vvv ?? -->
        <rosparam file="$(find kart_2dnav)/params/pointcloud_to_laserscan_params.yaml" command="load" /> 
        <remap from="cloud_in" to="/velodyne_points" />
        <remap from="scan" to="top/scan" />
    </node>

    <!-- perform transform from velodyne sensor to kart base -->
    <!-- <node pkg="kart_setup_lidar_tf" type="tf_broadcaster" name="robot_tf" output="screen">
    </node> -->
    <node pkg="tf" type="static_transform_publisher" name="base_footprint_to_base_link" args="0 0 0.5 0 0 0 1 base_footprint base_link 100"/>

    <node pkg="tf" type="static_transform_publisher" name="base_link_to_imu" args="0 0 0 0 0 0 1 base_link imu_link 100" /> 

    <!-- SBG TOPIC TRANSFER -->
    <!-- Convert the incoming sbg data to imu data -->

    <node pkg="sbg_to_imu" type="sbg_to_imu.py" name="sbg_to_imu" output="screen" />

    <!-- Fake the odometry data for now, used for testing -->

    <node pkg="sbg_to_imu" type="fake_odom.py" name="fake_odom" output="screen" />

    <!-- IMU Filter -->
    <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter_madgwick" output="screen">
        <rosparam file="$(find kart_2dnav)/params/imu_filter_madgwick_params.yaml" command="load" />
    </node>

    <!-- LASER ODOMETRY -->
    <!-- Run the laser_scan_matcher to get odom info from the LiDAR -->
    <node pkg="laser_scan_matcher" type="laser_scan_matcher_node" name="laser_scan_matcher" output="screen">
        <rosparam file="$(find kart_2dnav)/params/laser_scan_matcher_params.yaml" command="load" />
    </node>

    <node pkg="sbg_to_imu" type="pose2d_to_pose.py" name="pose2d_to_pose" output="screen" >
    </node>

    <!-- SENSOR FUSION -->
    <!-- Run the Robot Localization Extended Kalman Filter -->

    <include file="$(find kart_2dnav)/launch/kart/robot_pose_ekf.launch" />
    

    <node pkg="tf" type="static_transform_publisher" name="base_link_to_velodyne" args="0 0 0 0 0 0 1 base_link velodyne 100"/>

    <!-- MAPPING -->
    <!-- Run the slam gmapping node in order to build a map off of laser scans -->
    <node pkg="gmapping" type="slam_gmapping" name="gmapping" output="screen">
        <rosparam file="$(find kart_2dnav)/params/slam_gmapping_params.yaml" command="load" />
        <remap from="scan" to="kart/scan" />
    </node>

    <!-- NAVIGATION STACK (move base with teb_local_planner) -->
    <!-- Run the move_base to execute the navigation stack -->

    <include file="$(find kart_2dnav)/launch/kart/teb_local_planner_move_base.launch" />

    <!-- Run the goal setting script to navigate in SLAM mode -->
    <node pkg="slam_mode_goal" type="slam_mode_goal" name="slam_mode_goal" output="screen">
    </node>


    <!-- Launch rviz with the configuration file in order to visualize incoming data -->
    <!-- NOTE: Remove for when actually embedded into the Jetson -->
    
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find kart_2dnav)/params/kart_rviz.rviz" />

</launch>

<?xml version="1.0"?>
<!-- This launch file should be used for simulation testing on the autocross track

     More specifically, this launch file runs the entire autonomous software
     stack (as opposed to e.g. sim_autocross_track_only_goal_setting.launch)
     in an RViz simulation.

     TODO(Issue 18): Fix the loop closure issue.
-->

<launch>
  <!-- SIMULATION CONFIGURATION -->
  <param name="/use_sim_time" value="true"/>

  <!-- Launch the RViz simulation -->
  <!--<node pkg="stage_ros_mod_tf" type="stage_ros_mod_tf_node" 
        name="stage_ros_mod_tf_node" 
        args="$(find kart_2dnav)/stage/autocross_track.world">
   Remap the scan topic to top/scan to match naming used for output
         scan topic from pointcloud_to_laserscan 
    <remap from="base_scan" to="top/scan"/>
  </node>-->

  <!-- LASER ODOMETRY -->
  <!-- This node is responsible for taking incremental 2D laserscans (/top/scan)
       and outputting estimated odometry information as a tf (odom->base_link) 
       and by publishing nav_msgs/Odometry messages to the /odom topic. -->
  <node pkg="laser_scan_matcher_odom" type="laser_scan_matcher_node_odom" 
        name="laser_scan_matcher_node_odom" output="screen">
      <remap from="scan" to="/top/scan" /> 
      <rosparam file="$(find kart_2dnav)/params/laser_scan_matcher_params.yaml" 
                command="load" />
  </node>

  <!-- SLAM: LOCALIZATION & MAPPING -->
  <!-- Run the SLAM package, HectorMapping, that takes in 2D laser scans 
       (/top/scan) and publishes topics for the created map (/map) and 
       estimated pose (/slam_out_pose) of the kart relative to the map. 
       This node is also responsible for publishing the tf map->odom. --> 
  <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
      <remap from="scan" to="/top/scan" />
      <rosparam file="$(find kart_2dnav)/params/hector_mapping_params.yaml" command="load" />
  </node>

  <!-- GOAL SETTING -->
  <!-- Run the goal setting algorithm to navigate without a preliminary map (lap 1).
       This node takes 2D laser scans (/top/scan) then constructs a goal message and 
       creates an ActionClient to sends the goal as ROS actions to SimpleActionServer 
       on move_base. -->
  <!-- TODO: Figure out how to incorporate ROS params with goal setting script -->
  <node pkg="slam_mode_goal" type="slam_mode_goal" name="slam_mode_goal" output="screen">
  </node>

  <!-- ROS NAVIGATION STACK -->
  <!-- Configure and run move_base to set up the ROS Navigation Stack. -->
  <!-- More details on inputs/outputs can be found in move_base.launch -->
  <include file="$(find kart_2dnav)/launch/move_base.launch" />

  <!-- MICROCONTROLLER COMM -->
  <!-- Run the communication script to enable and start communicating with the 
       microcontroller. This node subscribed to the /cmd_vel topic published by 
       move_base and then then sends packets containing the velocity and steering 
       angle to the MCU over a serial connection. -->
  <node pkg="ti_comm" type="ti_comm_node" name="ti_comm_node" output="screen" />

  <!-- Launch rviz with the configuration file in order to visualize incoming data

       Note: This should only be set when running the system with simulated 
             sensor data (rosbags).
  -->
  <!--<node name="rviz" pkg="rviz" type="rviz" 
        args="-d $(find kart_2dnav)/params/kart_rviz.rviz" />-->

</launch>
